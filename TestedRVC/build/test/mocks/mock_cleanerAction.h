/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CLEANERACTION_H
#define _MOCK_CLEANERACTION_H

#include "unity.h"
#include "cleanerAction.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_cleanerAction_Init(void);
void mock_cleanerAction_Destroy(void);
void mock_cleanerAction_Verify(void);




#define cleanerSwitch_Ignore() cleanerSwitch_CMockIgnore()
void cleanerSwitch_CMockIgnore(void);
#define cleanerSwitch_StopIgnore() cleanerSwitch_CMockStopIgnore()
void cleanerSwitch_CMockStopIgnore(void);
#define cleanerSwitch_Expect(command) cleanerSwitch_CMockExpect(__LINE__, command)
void cleanerSwitch_CMockExpect(UNITY_LINE_TYPE cmock_line, int command);
typedef void (* CMOCK_cleanerSwitch_CALLBACK)(int command, int cmock_num_calls);
void cleanerSwitch_AddCallback(CMOCK_cleanerSwitch_CALLBACK Callback);
void cleanerSwitch_Stub(CMOCK_cleanerSwitch_CALLBACK Callback);
#define cleanerSwitch_StubWithCallback cleanerSwitch_Stub
#define powerUpCleaner_Ignore() powerUpCleaner_CMockIgnore()
void powerUpCleaner_CMockIgnore(void);
#define powerUpCleaner_StopIgnore() powerUpCleaner_CMockStopIgnore()
void powerUpCleaner_CMockStopIgnore(void);
#define powerUpCleaner_Expect() powerUpCleaner_CMockExpect(__LINE__)
void powerUpCleaner_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_powerUpCleaner_CALLBACK)(int cmock_num_calls);
void powerUpCleaner_AddCallback(CMOCK_powerUpCleaner_CALLBACK Callback);
void powerUpCleaner_Stub(CMOCK_powerUpCleaner_CALLBACK Callback);
#define powerUpCleaner_StubWithCallback powerUpCleaner_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
