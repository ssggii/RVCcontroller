/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MAIN_H
#define _MOCK_MAIN_H

#include "unity.h"
#include "main.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_main_Init(void);
void mock_main_Destroy(void);
void mock_main_Verify(void);




#define detectDust_IgnoreAndReturn(cmock_retval) detectDust_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void detectDust_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define detectDust_StopIgnore() detectDust_CMockStopIgnore()
void detectDust_CMockStopIgnore(void);
#define detectDust_ExpectAndReturn(cmock_retval) detectDust_CMockExpectAndReturn(__LINE__, cmock_retval)
void detectDust_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_detectDust_CALLBACK)(int cmock_num_calls);
void detectDust_AddCallback(CMOCK_detectDust_CALLBACK Callback);
void detectDust_Stub(CMOCK_detectDust_CALLBACK Callback);
#define detectDust_StubWithCallback detectDust_Stub
#define detectObstacleDirection_Ignore() detectObstacleDirection_CMockIgnore()
void detectObstacleDirection_CMockIgnore(void);
#define detectObstacleDirection_StopIgnore() detectObstacleDirection_CMockStopIgnore()
void detectObstacleDirection_CMockStopIgnore(void);
#define detectObstacleDirection_Expect(obstacleArray) detectObstacleDirection_CMockExpect(__LINE__, obstacleArray)
void detectObstacleDirection_CMockExpect(UNITY_LINE_TYPE cmock_line, int* obstacleArray);
typedef void (* CMOCK_detectObstacleDirection_CALLBACK)(int* obstacleArray, int cmock_num_calls);
void detectObstacleDirection_AddCallback(CMOCK_detectObstacleDirection_CALLBACK Callback);
void detectObstacleDirection_Stub(CMOCK_detectObstacleDirection_CALLBACK Callback);
#define detectObstacleDirection_StubWithCallback detectObstacleDirection_Stub
#define dustSensorInterface_IgnoreAndReturn(cmock_retval) dustSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dustSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define dustSensorInterface_StopIgnore() dustSensorInterface_CMockStopIgnore()
void dustSensorInterface_CMockStopIgnore(void);
#define dustSensorInterface_ExpectAndReturn(cmock_retval) dustSensorInterface_CMockExpectAndReturn(__LINE__, cmock_retval)
void dustSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_dustSensorInterface_CALLBACK)(int cmock_num_calls);
void dustSensorInterface_AddCallback(CMOCK_dustSensorInterface_CALLBACK Callback);
void dustSensorInterface_Stub(CMOCK_dustSensorInterface_CALLBACK Callback);
#define dustSensorInterface_StubWithCallback dustSensorInterface_Stub
#define frontSensorInterface_IgnoreAndReturn(cmock_retval) frontSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void frontSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define frontSensorInterface_StopIgnore() frontSensorInterface_CMockStopIgnore()
void frontSensorInterface_CMockStopIgnore(void);
#define frontSensorInterface_ExpectAndReturn(cmock_retval) frontSensorInterface_CMockExpectAndReturn(__LINE__, cmock_retval)
void frontSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_frontSensorInterface_CALLBACK)(int cmock_num_calls);
void frontSensorInterface_AddCallback(CMOCK_frontSensorInterface_CALLBACK Callback);
void frontSensorInterface_Stub(CMOCK_frontSensorInterface_CALLBACK Callback);
#define frontSensorInterface_StubWithCallback frontSensorInterface_Stub
#define leftSensorInterface_IgnoreAndReturn(cmock_retval) leftSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void leftSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define leftSensorInterface_StopIgnore() leftSensorInterface_CMockStopIgnore()
void leftSensorInterface_CMockStopIgnore(void);
#define leftSensorInterface_ExpectAndReturn(cmock_retval) leftSensorInterface_CMockExpectAndReturn(__LINE__, cmock_retval)
void leftSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_leftSensorInterface_CALLBACK)(int cmock_num_calls);
void leftSensorInterface_AddCallback(CMOCK_leftSensorInterface_CALLBACK Callback);
void leftSensorInterface_Stub(CMOCK_leftSensorInterface_CALLBACK Callback);
#define leftSensorInterface_StubWithCallback leftSensorInterface_Stub
#define rightSensorInterface_IgnoreAndReturn(cmock_retval) rightSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void rightSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define rightSensorInterface_StopIgnore() rightSensorInterface_CMockStopIgnore()
void rightSensorInterface_CMockStopIgnore(void);
#define rightSensorInterface_ExpectAndReturn(cmock_retval) rightSensorInterface_CMockExpectAndReturn(__LINE__, cmock_retval)
void rightSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_rightSensorInterface_CALLBACK)(int cmock_num_calls);
void rightSensorInterface_AddCallback(CMOCK_rightSensorInterface_CALLBACK Callback);
void rightSensorInterface_Stub(CMOCK_rightSensorInterface_CALLBACK Callback);
#define rightSensorInterface_StubWithCallback rightSensorInterface_Stub
#define performActionByMode_IgnoreAndReturn(cmock_retval) performActionByMode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void performActionByMode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define performActionByMode_StopIgnore() performActionByMode_CMockStopIgnore()
void performActionByMode_CMockStopIgnore(void);
#define performActionByMode_ExpectAndReturn(d, f, l, r, mode, cmock_retval) performActionByMode_CMockExpectAndReturn(__LINE__, d, f, l, r, mode, cmock_retval)
void performActionByMode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int d, int f, int l, int r, int mode, int cmock_to_return);
typedef int (* CMOCK_performActionByMode_CALLBACK)(int d, int f, int l, int r, int mode, int cmock_num_calls);
void performActionByMode_AddCallback(CMOCK_performActionByMode_CALLBACK Callback);
void performActionByMode_Stub(CMOCK_performActionByMode_CALLBACK Callback);
#define performActionByMode_StubWithCallback performActionByMode_Stub
#define performActionForward_Ignore() performActionForward_CMockIgnore()
void performActionForward_CMockIgnore(void);
#define performActionForward_StopIgnore() performActionForward_CMockStopIgnore()
void performActionForward_CMockStopIgnore(void);
#define performActionForward_Expect(f, l, r, mode) performActionForward_CMockExpect(__LINE__, f, l, r, mode)
void performActionForward_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_performActionForward_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void performActionForward_AddCallback(CMOCK_performActionForward_CALLBACK Callback);
void performActionForward_Stub(CMOCK_performActionForward_CALLBACK Callback);
#define performActionForward_StubWithCallback performActionForward_Stub
#define performActionBackward_Ignore() performActionBackward_CMockIgnore()
void performActionBackward_CMockIgnore(void);
#define performActionBackward_StopIgnore() performActionBackward_CMockStopIgnore()
void performActionBackward_CMockStopIgnore(void);
#define performActionBackward_Expect(f, l, r, mode) performActionBackward_CMockExpect(__LINE__, f, l, r, mode)
void performActionBackward_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_performActionBackward_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void performActionBackward_AddCallback(CMOCK_performActionBackward_CALLBACK Callback);
void performActionBackward_Stub(CMOCK_performActionBackward_CALLBACK Callback);
#define performActionBackward_StubWithCallback performActionBackward_Stub
#define turnFirstActionFromForward_Ignore() turnFirstActionFromForward_CMockIgnore()
void turnFirstActionFromForward_CMockIgnore(void);
#define turnFirstActionFromForward_StopIgnore() turnFirstActionFromForward_CMockStopIgnore()
void turnFirstActionFromForward_CMockStopIgnore(void);
#define turnFirstActionFromForward_Expect(f, l, r, mode) turnFirstActionFromForward_CMockExpect(__LINE__, f, l, r, mode)
void turnFirstActionFromForward_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_turnFirstActionFromForward_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void turnFirstActionFromForward_AddCallback(CMOCK_turnFirstActionFromForward_CALLBACK Callback);
void turnFirstActionFromForward_Stub(CMOCK_turnFirstActionFromForward_CALLBACK Callback);
#define turnFirstActionFromForward_StubWithCallback turnFirstActionFromForward_Stub
#define turnFirstActionFromBackward_Ignore() turnFirstActionFromBackward_CMockIgnore()
void turnFirstActionFromBackward_CMockIgnore(void);
#define turnFirstActionFromBackward_StopIgnore() turnFirstActionFromBackward_CMockStopIgnore()
void turnFirstActionFromBackward_CMockStopIgnore(void);
#define turnFirstActionFromBackward_Expect(f, l, r, mode) turnFirstActionFromBackward_CMockExpect(__LINE__, f, l, r, mode)
void turnFirstActionFromBackward_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_turnFirstActionFromBackward_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void turnFirstActionFromBackward_AddCallback(CMOCK_turnFirstActionFromBackward_CALLBACK Callback);
void turnFirstActionFromBackward_Stub(CMOCK_turnFirstActionFromBackward_CALLBACK Callback);
#define turnFirstActionFromBackward_StubWithCallback turnFirstActionFromBackward_Stub
#define turnSecondAction_Ignore() turnSecondAction_CMockIgnore()
void turnSecondAction_CMockIgnore(void);
#define turnSecondAction_StopIgnore() turnSecondAction_CMockStopIgnore()
void turnSecondAction_CMockStopIgnore(void);
#define turnSecondAction_Expect() turnSecondAction_CMockExpect(__LINE__)
void turnSecondAction_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_turnSecondAction_CALLBACK)(int cmock_num_calls);
void turnSecondAction_AddCallback(CMOCK_turnSecondAction_CALLBACK Callback);
void turnSecondAction_Stub(CMOCK_turnSecondAction_CALLBACK Callback);
#define turnSecondAction_StubWithCallback turnSecondAction_Stub
#define moveForward_Ignore() moveForward_CMockIgnore()
void moveForward_CMockIgnore(void);
#define moveForward_StopIgnore() moveForward_CMockStopIgnore()
void moveForward_CMockStopIgnore(void);
#define moveForward_Expect(command) moveForward_CMockExpect(__LINE__, command)
void moveForward_CMockExpect(UNITY_LINE_TYPE cmock_line, int command);
typedef void (* CMOCK_moveForward_CALLBACK)(int command, int cmock_num_calls);
void moveForward_AddCallback(CMOCK_moveForward_CALLBACK Callback);
void moveForward_Stub(CMOCK_moveForward_CALLBACK Callback);
#define moveForward_StubWithCallback moveForward_Stub
#define cleanerSwitch_Ignore() cleanerSwitch_CMockIgnore()
void cleanerSwitch_CMockIgnore(void);
#define cleanerSwitch_StopIgnore() cleanerSwitch_CMockStopIgnore()
void cleanerSwitch_CMockStopIgnore(void);
#define cleanerSwitch_Expect(command) cleanerSwitch_CMockExpect(__LINE__, command)
void cleanerSwitch_CMockExpect(UNITY_LINE_TYPE cmock_line, int command);
typedef void (* CMOCK_cleanerSwitch_CALLBACK)(int command, int cmock_num_calls);
void cleanerSwitch_AddCallback(CMOCK_cleanerSwitch_CALLBACK Callback);
void cleanerSwitch_Stub(CMOCK_cleanerSwitch_CALLBACK Callback);
#define cleanerSwitch_StubWithCallback cleanerSwitch_Stub
#define powerUpCleaner_Ignore() powerUpCleaner_CMockIgnore()
void powerUpCleaner_CMockIgnore(void);
#define powerUpCleaner_StopIgnore() powerUpCleaner_CMockStopIgnore()
void powerUpCleaner_CMockStopIgnore(void);
#define powerUpCleaner_Expect() powerUpCleaner_CMockExpect(__LINE__)
void powerUpCleaner_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_powerUpCleaner_CALLBACK)(int cmock_num_calls);
void powerUpCleaner_AddCallback(CMOCK_powerUpCleaner_CALLBACK Callback);
void powerUpCleaner_Stub(CMOCK_powerUpCleaner_CALLBACK Callback);
#define powerUpCleaner_StubWithCallback powerUpCleaner_Stub
#define turn_Ignore() turn_CMockIgnore()
void turn_CMockIgnore(void);
#define turn_StopIgnore() turn_CMockStopIgnore()
void turn_CMockStopIgnore(void);
#define turn_Expect(f, l, r, mode) turn_CMockExpect(__LINE__, f, l, r, mode)
void turn_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_turn_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void turn_AddCallback(CMOCK_turn_CALLBACK Callback);
void turn_Stub(CMOCK_turn_CALLBACK Callback);
#define turn_StubWithCallback turn_Stub
#define turnLeft_Ignore() turnLeft_CMockIgnore()
void turnLeft_CMockIgnore(void);
#define turnLeft_StopIgnore() turnLeft_CMockStopIgnore()
void turnLeft_CMockStopIgnore(void);
#define turnLeft_Expect() turnLeft_CMockExpect(__LINE__)
void turnLeft_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_turnLeft_CALLBACK)(int cmock_num_calls);
void turnLeft_AddCallback(CMOCK_turnLeft_CALLBACK Callback);
void turnLeft_Stub(CMOCK_turnLeft_CALLBACK Callback);
#define turnLeft_StubWithCallback turnLeft_Stub
#define turnRight_Ignore() turnRight_CMockIgnore()
void turnRight_CMockIgnore(void);
#define turnRight_StopIgnore() turnRight_CMockStopIgnore()
void turnRight_CMockStopIgnore(void);
#define turnRight_Expect() turnRight_CMockExpect(__LINE__)
void turnRight_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_turnRight_CALLBACK)(int cmock_num_calls);
void turnRight_AddCallback(CMOCK_turnRight_CALLBACK Callback);
void turnRight_Stub(CMOCK_turnRight_CALLBACK Callback);
#define turnRight_StubWithCallback turnRight_Stub
#define moveBackward_Ignore() moveBackward_CMockIgnore()
void moveBackward_CMockIgnore(void);
#define moveBackward_StopIgnore() moveBackward_CMockStopIgnore()
void moveBackward_CMockStopIgnore(void);
#define moveBackward_Expect(command) moveBackward_CMockExpect(__LINE__, command)
void moveBackward_CMockExpect(UNITY_LINE_TYPE cmock_line, int command);
typedef void (* CMOCK_moveBackward_CALLBACK)(int command, int cmock_num_calls);
void moveBackward_AddCallback(CMOCK_moveBackward_CALLBACK Callback);
void moveBackward_Stub(CMOCK_moveBackward_CALLBACK Callback);
#define moveBackward_StubWithCallback moveBackward_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
