/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TURN_H
#define _MOCK_TURN_H

#include "unity.h"
#include "turn.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_turn_Init(void);
void mock_turn_Destroy(void);
void mock_turn_Verify(void);




#define turn_Ignore() turn_CMockIgnore()
void turn_CMockIgnore(void);
#define turn_StopIgnore() turn_CMockStopIgnore()
void turn_CMockStopIgnore(void);
#define turn_Expect(f, l, r, mode) turn_CMockExpect(__LINE__, f, l, r, mode)
void turn_CMockExpect(UNITY_LINE_TYPE cmock_line, int f, int l, int r, int mode);
typedef void (* CMOCK_turn_CALLBACK)(int f, int l, int r, int mode, int cmock_num_calls);
void turn_AddCallback(CMOCK_turn_CALLBACK Callback);
void turn_Stub(CMOCK_turn_CALLBACK Callback);
#define turn_StubWithCallback turn_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
