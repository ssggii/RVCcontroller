/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MOTORACTION_H
#define _MOCK_MOTORACTION_H

#include "unity.h"
#include "motorAction.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_motorAction_Init(void);
void mock_motorAction_Destroy(void);
void mock_motorAction_Verify(void);




#define turnLeft_IgnoreAndReturn(cmock_retval) turnLeft_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void turnLeft_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define turnLeft_StopIgnore() turnLeft_CMockStopIgnore()
void turnLeft_CMockStopIgnore(void);
#define turnLeft_ExpectAndReturn(cmock_retval) turnLeft_CMockExpectAndReturn(__LINE__, cmock_retval)
void turnLeft_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
typedef char* (* CMOCK_turnLeft_CALLBACK)(int cmock_num_calls);
void turnLeft_AddCallback(CMOCK_turnLeft_CALLBACK Callback);
void turnLeft_Stub(CMOCK_turnLeft_CALLBACK Callback);
#define turnLeft_StubWithCallback turnLeft_Stub
#define turnRight_IgnoreAndReturn(cmock_retval) turnRight_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void turnRight_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define turnRight_StopIgnore() turnRight_CMockStopIgnore()
void turnRight_CMockStopIgnore(void);
#define turnRight_ExpectAndReturn(cmock_retval) turnRight_CMockExpectAndReturn(__LINE__, cmock_retval)
void turnRight_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
typedef char* (* CMOCK_turnRight_CALLBACK)(int cmock_num_calls);
void turnRight_AddCallback(CMOCK_turnRight_CALLBACK Callback);
void turnRight_Stub(CMOCK_turnRight_CALLBACK Callback);
#define turnRight_StubWithCallback turnRight_Stub
#define moveForward_IgnoreAndReturn(cmock_retval) moveForward_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void moveForward_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define moveForward_StopIgnore() moveForward_CMockStopIgnore()
void moveForward_CMockStopIgnore(void);
#define moveForward_ExpectAndReturn(command, cmock_retval) moveForward_CMockExpectAndReturn(__LINE__, command, cmock_retval)
void moveForward_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int command, char* cmock_to_return);
typedef char* (* CMOCK_moveForward_CALLBACK)(int command, int cmock_num_calls);
void moveForward_AddCallback(CMOCK_moveForward_CALLBACK Callback);
void moveForward_Stub(CMOCK_moveForward_CALLBACK Callback);
#define moveForward_StubWithCallback moveForward_Stub
#define moveBackward_IgnoreAndReturn(cmock_retval) moveBackward_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void moveBackward_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define moveBackward_StopIgnore() moveBackward_CMockStopIgnore()
void moveBackward_CMockStopIgnore(void);
#define moveBackward_ExpectAndReturn(command, cmock_retval) moveBackward_CMockExpectAndReturn(__LINE__, command, cmock_retval)
void moveBackward_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int command, char* cmock_to_return);
typedef char* (* CMOCK_moveBackward_CALLBACK)(int command, int cmock_num_calls);
void moveBackward_AddCallback(CMOCK_moveBackward_CALLBACK Callback);
void moveBackward_Stub(CMOCK_moveBackward_CALLBACK Callback);
#define moveBackward_StubWithCallback moveBackward_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
