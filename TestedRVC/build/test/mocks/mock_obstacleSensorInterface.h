/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_OBSTACLESENSORINTERFACE_H
#define _MOCK_OBSTACLESENSORINTERFACE_H

#include "unity.h"
#include "obstacleSensorInterface.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_obstacleSensorInterface_Init(void);
void mock_obstacleSensorInterface_Destroy(void);
void mock_obstacleSensorInterface_Verify(void);




#define detectDust_IgnoreAndReturn(cmock_retval) detectDust_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void detectDust_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define detectDust_StopIgnore() detectDust_CMockStopIgnore()
void detectDust_CMockStopIgnore(void);
#define detectDust_ExpectAndReturn(dustInput, cmock_retval) detectDust_CMockExpectAndReturn(__LINE__, dustInput, cmock_retval)
void detectDust_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int dustInput, int cmock_to_return);
typedef int (* CMOCK_detectDust_CALLBACK)(int dustInput, int cmock_num_calls);
void detectDust_AddCallback(CMOCK_detectDust_CALLBACK Callback);
void detectDust_Stub(CMOCK_detectDust_CALLBACK Callback);
#define detectDust_StubWithCallback detectDust_Stub
#define dustSensorInterface_IgnoreAndReturn(cmock_retval) dustSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dustSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define dustSensorInterface_StopIgnore() dustSensorInterface_CMockStopIgnore()
void dustSensorInterface_CMockStopIgnore(void);
#define dustSensorInterface_ExpectAndReturn(seed, cmock_retval) dustSensorInterface_CMockExpectAndReturn(__LINE__, seed, cmock_retval)
void dustSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int* seed, int cmock_to_return);
typedef int (* CMOCK_dustSensorInterface_CALLBACK)(unsigned int* seed, int cmock_num_calls);
void dustSensorInterface_AddCallback(CMOCK_dustSensorInterface_CALLBACK Callback);
void dustSensorInterface_Stub(CMOCK_dustSensorInterface_CALLBACK Callback);
#define dustSensorInterface_StubWithCallback dustSensorInterface_Stub
#define frontSensorInterface_IgnoreAndReturn(cmock_retval) frontSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void frontSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define frontSensorInterface_StopIgnore() frontSensorInterface_CMockStopIgnore()
void frontSensorInterface_CMockStopIgnore(void);
#define frontSensorInterface_ExpectAndReturn(seed, cmock_retval) frontSensorInterface_CMockExpectAndReturn(__LINE__, seed, cmock_retval)
void frontSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int* seed, int cmock_to_return);
typedef int (* CMOCK_frontSensorInterface_CALLBACK)(unsigned int* seed, int cmock_num_calls);
void frontSensorInterface_AddCallback(CMOCK_frontSensorInterface_CALLBACK Callback);
void frontSensorInterface_Stub(CMOCK_frontSensorInterface_CALLBACK Callback);
#define frontSensorInterface_StubWithCallback frontSensorInterface_Stub
#define leftSensorInterface_IgnoreAndReturn(cmock_retval) leftSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void leftSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define leftSensorInterface_StopIgnore() leftSensorInterface_CMockStopIgnore()
void leftSensorInterface_CMockStopIgnore(void);
#define leftSensorInterface_ExpectAndReturn(seed, cmock_retval) leftSensorInterface_CMockExpectAndReturn(__LINE__, seed, cmock_retval)
void leftSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int* seed, int cmock_to_return);
typedef int (* CMOCK_leftSensorInterface_CALLBACK)(unsigned int* seed, int cmock_num_calls);
void leftSensorInterface_AddCallback(CMOCK_leftSensorInterface_CALLBACK Callback);
void leftSensorInterface_Stub(CMOCK_leftSensorInterface_CALLBACK Callback);
#define leftSensorInterface_StubWithCallback leftSensorInterface_Stub
#define rightSensorInterface_IgnoreAndReturn(cmock_retval) rightSensorInterface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void rightSensorInterface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define rightSensorInterface_StopIgnore() rightSensorInterface_CMockStopIgnore()
void rightSensorInterface_CMockStopIgnore(void);
#define rightSensorInterface_ExpectAndReturn(seed, cmock_retval) rightSensorInterface_CMockExpectAndReturn(__LINE__, seed, cmock_retval)
void rightSensorInterface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int* seed, int cmock_to_return);
typedef int (* CMOCK_rightSensorInterface_CALLBACK)(unsigned int* seed, int cmock_num_calls);
void rightSensorInterface_AddCallback(CMOCK_rightSensorInterface_CALLBACK Callback);
void rightSensorInterface_Stub(CMOCK_rightSensorInterface_CALLBACK Callback);
#define rightSensorInterface_StubWithCallback rightSensorInterface_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
